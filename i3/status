#!/usr/bin/env python

import datetime
import json
import sys
import subprocess
import time

interval = 1
pretty = True


def echo(data, first_line=True, pretty=False):
    if type(data) in (list, dict):
        kwargs = {}

        if pretty:
            kwargs = {"indent": 2}

        if isinstance(data, list):
            data = [x for x in data if x]

        data = json.dumps(data, **kwargs)

    if not first_line:
        data = "," + data

    sys.stdout.write(data + "\n")
    sys.stdout.flush()


def iterate(interval):
    yield True

    while True:
        time.sleep(interval)

        yield False


def exec(command):
    try:
        stdout = subprocess.check_output(
            command, stderr=subprocess.STDOUT, shell=True
        )

        return stdout.decode("utf-8").strip()
    except Exception:
        pass


def widget_music():
    song = exec("rhythmbox-client --no-start --print-playing")

    urgent = getattr(widget_music, "cache", None) != song

    setattr(widget_music, "cache", song)

    if not song or song == "-":
        return

    if len(song) > 96:
        song = song[:96] + "..."

    full_text = " [ " + song + " ] "

    return {
        "name": "music",
        "instance": "music",
        "markup": "none",
        "full_text": full_text,
        "urgent": urgent,
    }


def widget_spacer(size=0):
    full_text = " " * size

    return {
        "name": "spacer",
        "instance": "spacer",
        "markup": "none",
        "full_text": full_text,
    }


def widget_clock(format="%Y-%m-%d %H:%M"):
    full_text = datetime.datetime.now().strftime(format)

    return {
        "name": "clock",
        "instance": "clock",
        "markup": "none",
        "full_text": full_text,
    }


def widget_volume():
    volume = exec("~/.config/i3/audio volume")

    try:
        volume = volume.rstrip("%")
        volume = int(volume)

        full_text = "{}% ".format(volume)
    except Exception:
        full_text = ""

    return {
        "name": "volume",
        "instance": "volume",
        "markup": "none",
        "full_text": full_text,
    }


def widget_ethernet():
    with open("/proc/net/dev") as file:
        for line in file.readlines():
            fields = line.split(":", 1)

            if fields[0].strip().startswith("enp"):
                break
        else:
            return

    full_text = ""

    return {
        "name": "ethernet",
        "instance": "ethernet",
        "markup": "none",
        "full_text": full_text,
    }


if __name__ == "__main__":
    try:
        interval = int(sys.argv[1])
    except Exception:
        pass

    echo({"version": 1})
    echo("[")

    for first_iter in iterate(interval):
        status = [
            widget_music(),
            widget_volume(),
            # {
            #     "name": "wifi",
            #     "instance": "wifi",
            #     "markup": "none",
            #     "full_text": "",
            # },
            widget_ethernet(),
            {
                "name": "battery",
                "instance": "battery",
                "markup": "none",
                "full_text": "",
            },
            widget_clock(),
            widget_spacer(),
        ]

        echo(status, first_iter, pretty)

    echo("]")
