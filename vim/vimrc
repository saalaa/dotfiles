filetype plugin indent on

set modeline
"set number
set wildmenu
set showcmd
set autoindent
set hlsearch
set incsearch
set sts=4
set sw=4
set si
set et
set sj=-30

set formatoptions+=r
set formatoptions+=o

let mapleader = ","

" TagList {{{

let g:Tlist_GainFocus_On_ToggleOpen = 0
let Tlist_Use_Horiz_Window = 1
let Tlist_Display_Tag_Scope = 1
let Tlist_WinHeight = 1
let Tlist_Enable_Fold_Column = 0

"set updatetime=300

"map  <C-Space>      :call OpenAndHighlight()<CR>
"map! <C-Space> <ESC>:call OpenAndHighlight()<CR>a

fun! OpenAndHighlight()
    TlistOpen
    wincmd p
    TlistHighlightTag
endfun

" }}}
" OpenERP {{{

" This function will restart an OpenERP server; the only constraint is that it
" must run in a screen Window called 'Server' in a Session called 'OpenERP'.
"
" Recent versions of OpenERP 5.x can't be killed cleanly and require a ^Z
" followed by a manual kill and while this is fixed in OpenERP 6.x two ^C are
" sometimes needed. The command kill_openerp is a bash function defined as
" follow in ~/.bashrc:
"
"   kill_openerp ()
"   {
"       kill %%; kill %%; kill -9 %%
"       kill %%; kill %%; kill -9 %%
"       kill %%; kill %%; kill -15 %%
"       kill %%; kill %%
"   }
function! RestartOpenERP()
    let junk = system("screen -rx OpenERP -p Server -X stuff `echo $'\\cc'`")
    let junk = system("screen -rx OpenERP -p Server -X stuff `echo $'\\cc'`")
    let junk = system("screen -rx OpenERP -p Server -X stuff kill_openerp")
    let junk = system("screen -rx OpenERP -p Server -X stuff `echo $'\\cm'`")
    let junk = system("screen -rx OpenERP -p Server -X stuff `echo $'\\cp'`")
    let junk = system("screen -rx OpenERP -p Server -X stuff `echo $'\\cp'`")
    let junk = system("screen -rx OpenERP -p Server -X stuff `echo $'\\cm'`")

    echo "Command sent to screen."
endfunction

nmap <F6> :call RestartOpenERP()<CR>

" }}}
" Styling {{{

if ! has("gui_running") 
    set t_Co=256 
endif 


syntax on

set bg=dark
"set bg=light

"colorscheme solarized
colorscheme badwolf

set cursorline

hi Folded term=NONE cterm=NONE gui=NONE ctermbg=None

"hi Folded ctermbg=none ctermfg=darkgray
"hi Folded ctermbg=none ctermfg=237
"hi Folded ctermbg=233 ctermfg=234

set foldcolumn=0
set fml=0
set fillchars="vert: ,fold: "

" }}}
" Key Bindings {{{

"map <C-k> ddkP
"map <C-j> ddp
vmap <C-k> xkP`[V`]
vmap <C-j> xp`[V`]
inoremap kj <ESC>

nnoremap <F3> :set nonumber!<CR>:set foldcolumn=0<CR>

" }}}

" Coffee Script {{{

au BufRead,BufNewFile *.coffee setlocal filetype=coffee

" }}}
" Go {{{

au BufRead,BufNewFile *.go setlocal filetype=go
au BufRead,BufNewFile *.go setlocal noet sw=4 ts=4
au BufRead,BufNewFile *.go setlocal makeprg="go build"

" }}}
" Python {{{

function! TogglePythonBreakpoint()
    let lineno = line(".")
    let line = getline(lineno)

    if line =~ "pdb"
        exec "normal dd"
    else
        exec "normal Oimport pdb; pdb.set_trace()"
        exec "normal ^"
    endif
endfunction

au BufNewFile,BufRead *.py setlocal fdm=indent
au BufNewFile,BufRead *.py setlocal fdi=
au BufNewFile,BufRead *.py setlocal fdt=
au BufNewFile,BufRead *.py setlocal fdn=2
au BufNewFile,BufRead *.py setlocal nowrap
au BufNewFile,BufRead *.py setlocal tabstop=4
au BufNewFile,BufRead *.py setlocal efm=%C\ %.%#,%A\ \ File\ \"%f\"',\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
au BufNewFile,BufRead *.py setlocal makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"

au BufNewFile,BufRead *.py nmap <F2> :g/^class/p<CR>
au BufNewFile,BufRead *.py nmap <F5> :!python %<CR>

"au BufNewFile,BufRead *.py nmap <F9> :call TogglePythonBreakpoint()<CR>
au BufNewFile,BufRead *.py nmap <Leader>9 :call TogglePythonBreakpoint()<CR>


au BufNewFile,BufRead *.py hi Folded ctermbg=none ctermfg=237

"au BufNewFile,BufRead *.py setlocal fde=PythonSimpleFold()
"au BufNewFile,BufRead *.py set foldmethod=indent foldnestmax=1

" }}}
" XML {{{

au BufNewFile,BufRead *.xml setlocal nowrap
au BufNewFile,BufRead *.xml setlocal fdm=marker
au BufNewFile,BufRead *.xml hi Folded ctermbg=none ctermfg=lightmagenta

" }}}
" JRXML {{{

au BufNewFile,BufRead *.jrxml setlocal nowrap

" }}}
" Shell {{{

au BufRead *.sh nmap <F5> :!bash %<CR>

" }}}
" CSV {{{

au BufNewFile,BufRead *.csv setf csv

" }}}
" Mail {{{

au BufNewFile,BufRead *.mail setf mail

" }}}
" Notes {{{

fun! TodoDoneStop()
    let lineno = line(".")
    let line = getline(lineno)

    if line =~ "☐"
        let line = substitute(line, '☐', '☑', '')
    elseif line =~ "☑"
        let line = substitute(line, '☑', '☒', '')
    elseif line =~ "☒"
        let line = substitute(line, '☒ ', '', '')
    else
        let line = substitute(line, '\(\S\)', '☐ \1', '')
    endif

    call setline(lineno, line)
endfun

au BufNewFile,BufRead *.notes setf notes
au BufNewFile,BufRead *.notes setlocal fdm=indent
au BufNewFile,BufRead *.notes setlocal fdi=
au BufNewFile,BufRead *.notes setlocal fdt=
au BufNewFile,BufRead *.notes setlocal fdn=2
au BufNewFile,BufRead *.notes setlocal fml=1

map <Leader>m :call TodoDoneStop()<CR>

"au BufNewFile,BufRead *.notes setlocal fdm=marker

" }}}
" Clojure {{{

let vimclojure#NailgunClient = "/home/benoit/.vim/bin/ng"

let vimclojure#HighlightBuiltins = 1
let vimclojure#WantNailgun = 1

" }}}
" Diff {{{

au Filetype diff setlocal nowrap
au Filetype diff setlocal nofen

" }}}
" YML {{{

au BufNewFile,BufRead *.yml setlocal fdm=indent
au BufNewFile,BufRead *.yml setlocal fdi=
au BufNewFile,BufRead *.yml setlocal fdt=
au BufNewFile,BufRead *.yml setlocal fdn=2
au BufNewFile,BufRead *.yml setlocal nowrap
au BufNewFile,BufRead *.yml setlocal tabstop=2
au BufNewFile,BufRead *.yml setlocal sts=2
au BufNewFile,BufRead *.yml setlocal sw=2

" }}}

" vim: set fdm=marker:
