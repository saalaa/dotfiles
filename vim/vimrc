" Bootstrap pathogen.
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

" Load filetype-specific indent and plugin files
filetype plugin indent on

" Enable colors
syntax on

" Set colorscheme
set background=light
colorscheme ancient

let mapleader = "\<Space>"

set list
set listchars=tab:¬\ ,trail:¬

set nowrap              " never wrap long lines
set number              " show line numbers
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set wildmenu            " visual autocomplete for command menu
set showcmd             " show command in bottom bar
set showmatch           " highlight matching [{()}]

" Bloody indentation configuration
set expandtab           " tabs are spaces
set tabstop=2           " number of visual spaces per TAB
set softtabstop=2       " number of spaces in tab when editing
set shiftwidth=2        " number of spaces for autoindent
set autoindent          " enable autoindentation

" On Mac OS X, modelines is set to 0 due to a vulnerability. It makes sense to
" have secure system-wide defaults and less secure, per-user, settings.
set modelines=5
set modeline

" Set default encoding
set encoding=utf8

" Ignore common files
set wildignore+=*.so,*.swp,*.zip,*.png,*.gif,*.pyc,*.psd,*.xcf
set wildignore+=node_modules,vendor,dist,.git


" Key bindings
" ------------

" leave insert mode with kj
inoremap kj <ESC>

" Move text blocks around
vmap <C-k> xkP`[V`]
vmap <C-j> xp`[V`]

" Center searches inside screen
nnoremap n nzzzv
nnoremap N Nzzzv

" Navigate through tabs
nnoremap <C-tab>   :tabnext<cr>
inoremap <C-tab>   <ESC>:tabnext<cr>
nnoremap <C-S-tab> :tabprevious<cr>
inoremap <C-S-tab> <ESC>:tabprevious<cr>


" Settings for ag.vim
" -------------------

" Search with `ag`
nnoremap <D-/> :<C-u>Ag<space>

" Make K useful again
nnoremap <silent> <S-k> :<C-u>Ag <C-r>=expand("<cword>")<cr><cr>


" Settings for goldenview.vim
" ---------------------------

let g:goldenview__enable_default_mapping = 0

nmap <silent> <leader>l       <Plug>GoldenViewSplit
nmap <silent> <leader>n       <Plug>GoldenViewNext
nmap <silent> <leader>p       <Plug>GoldenViewPrevious
nmap <silent> <leader><Enter> <Plug>GoldenViewSwitchMain

" nmap <silent> <C-l> <Plug>GoldenViewSplit
" nmap <silent> <C-n> <Plug>GoldenViewNext
" nmap <silent> <C-S-n> <Plug>GoldenViewPrevious
" nmap <silent> <C-Enter> <Plug>GoldenViewSwitchMain


" Settings for ctrlp.vim
" ----------------------

let g:ctrlp_match_window = 'bottom,order:ttb,max:15'
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

" Nicely follows keyboard pattern rtyuio and p
nnoremap <silent> <C-e> :<C-u>CtrlPLauncher<cr>
nnoremap <silent> <C-r> :<C-u>CtrlPMRU<cr>
nnoremap <silent> <C-t> :<C-u>CtrlPTag<cr>
nnoremap <silent> <C-y> :<C-u>CtrlPYankring<cr>
nnoremap <silent> <C-u> :<C-u>CtrlPUndo<cr>
nnoremap <silent> <C-i> :<C-u>CtrlPLine<cr>
nnoremap <silent> <C-o> :<C-u>CtrlPBuffer<cr>


" Settings for Distraction Free Mode
" ----------------------------------

nnoremap <leader>z :Goyo<CR>


" Tabs, trailing spaces and long lines
" ------------------------------------

autocmd Syntax * syn match ErrorMsg /\s\+$/
autocmd Syntax * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)


" Slime configuration
" -------------------

let g:slime_target = 'tmux'


" Attempt to use `ag`
" -------------------

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif


" Custom file rules
" -----------------

au BufRead /tmp/mutt-* setf mail
au BufRead Vagrantfile setf ruby
