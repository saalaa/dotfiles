#!/bin/sh

set -e

chroot=no

progname=$0

memory=
boot_mode=
disk_label=

device=
boot_dev=
root_dev=

hostname=noeud
username=

with_gnome=no

#
# Utility functions
#

confirm() {
  read -p "Waiting, press ^C to abort or Return to continue"
}

error() {
  echo "Error: $1" >&2
}

fatal() {
  error "$1"
  exit 1
}

usage() {
  echo "Usage: $progname [--chroot] [--hostname HOSTNAME] [--username USERNAME] DEVICE"
}

info() {
  echo "Review configuration:"

  make_args | awk '/--/ && !/--chroot/ {print "  " $0}'
}

make_args () {
  echo --memory "$memory"
  echo --boot-mode "$boot_mode"
  echo --disk-label "$disk_label"

  echo --hostname "$hostname"

  if [ ! -z $username ]; then
    echo --username "$username"
  fi

  if [ "$with_gnome" = "yes" ]; then
    echo --with-gnome
  fi

  echo --chroot

  echo "$device"
}

#
# System Checks
#

check_network() {
  echo "Checking network"

  if ! ping -c1 google.com &>/dev/null; then
    fatal "Network does not appear to be configured"
  fi
}

#
# Settings detection
#

detect_memory() {
  echo "Detecting available memory"

  if [ ! -e /proc/meminfo ]; then
    fatal "Memory detection failed, try specifying '--memory'"
  fi

  memory=$(awk 'NR==1{print $2} ' /proc/meminfo)
  memory="$((memory / 1000))M"
}

detect_boot_mode() {
  echo "Detecting boot mode"

  boot_mode=bios

  # If this fails, there are alternatives:
  #   - dmesg | grep -q 'efi:'
  #   - dmesg | grep -q 'EFI v'
  if [ -d /sys/firmware/efi ]; then
    boot_mode=efi
  fi
}

detect_disk_label() {
  echo "Detecting disk label"

  disk_label=gpt

  boot_dev="${device}1"
  root_dev="${device}2"
}

#
# Actual setup/configuration functions
#

do_partition() {
  echo "Creating partitions"

  case "$disk_label" in
    msdos)
      do_partition_msdos
      ;;
    gpt)
      do_partition_gpt
      ;;
    *)
      fatal "Unknown disk label '$disk_label'"
      ;;
  esac
}

do_partition_msdos() {
  parted -s "$device" mklabel msdos

  parted -s -a optimal "$device" mkpart primary fat32 1Mb 551MB
  parted -s -a optimal "$device" mkpart primary ext4 551MB 100%

  parted -s "$device" set 1 boot on
}

do_partition_gpt() {
  parted -s "$device" mklabel gpt

  parted -s -a optimal "$device" mkpart esp fat32 1Mb 551MB
  parted -s -a optimal "$device" mkpart primary ext4 551MB 100%
}

do_filesystems() {
  mkfs.fat -F32 "$boot_dev" >/dev/null
  mkfs.ext4 -Fq "$root_dev" >/dev/null
}

do_mount() {
  echo "Mounting partitions"

  mount "$root_dev" /mnt

  mkdir /mnt/boot

  mount "$boot_dev" /mnt/boot
}

do_umount() {
  echo "Unmounting partitions"

  umount -R /mnt
}

do_copy() {
  echo "Copying script"

  progpath=$(CDPATH= cd -- "$(dirname -- "$progname")" && pwd)

  cp "$progpath/$progname" "/mnt/$progname"
}

do_bootstrap() {
  echo "Bootstrapping Archlinux"

  case "$(grep -m1 'model name' /proc/cpuinfo)" in
    *Intel*)
      microcode=intel-ucode
      ;;
    *)
      microcode=
  esac

  pacman -Syy

  pacstrap /mnt base grub efibootmgr ntp sudo "$microcode"
}

do_chroot() {
  echo "Entering chroot"

  arch-chroot /mnt sh "/$progname" $(make_args)
}

do_install_apps() {
  echo "Installing Applications"

  pacman --noconfirm -S base-devel openssh docker nginx vim zsh tmux ack git \
    nodejs npm flake8 go go-tools xclip

  systemctl enable sshd.service &>/dev/null
  systemctl enable docker.service &>/dev/null
  systemctl enable nginx.service &>/dev/null
}

do_install_gnome() {
  echo "Installing GNOME"

  pacman --noconfirm -S gnome gnome-extra gnome-keyring chromium darktable termite \
    networkmanager network-manager-applet ttf-droid fonts-tlwg

  systemctl enable gdm.service &>/dev/null
  systemctl enable NetworkManager.service &>/dev/null
}

do_configure_swap() {
  echo "Configuring swap"

  fallocate -l "${memory}" /swapfile
  chmod 600 /swapfile

  mkswap /swapfile &>/dev/null
}

do_configure_fstab() {
  echo "Configuring fsttab"

  genfstab -p /mnt >> /mnt/etc/fstab
  echo "/swapfile none swap defaults 0 0" >> /etc/fstab
}

do_configure_keyboard() {
  echo "Configuring keyboard"

  echo "KEYMAP=uk" > /etc/vconsole.conf
}

do_configure_grub() {
  echo "Configuring GRUB"

  if [ "$boot_mode" = "efi" ]; then
    grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
  else
    grub-install --target=i386-pc "$device"
  fi

  grub-mkconfig -o /boot/grub/grub.cfg
}

do_configure_time() {
  echo "Configuring time"

  ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime

  hwclock --systohc
}

do_configure_lang() {
  echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
  echo "fr_FR.UTF-8 UTF-8" >> /etc/locale.gen
  echo "th_TH.UTF-8 UTF-8" >> /etc/locale.gen

  locale-gen > /dev/null

  echo "LANG=en_US.UTF-8" >> /etc/locale.conf
  echo "LANGUAGE=en_US" >> /etc/locale.conf
  echo "LC_COLLATE=C" >> /etc/locale.conf
}

do_configure_sudo() {
  echo "Configuring sudo"

  echo "%wheel ALL=(ALL) ALL" >> /etc/sudoers
}

do_configure_host() {
  echo "Configuring host"

  echo "$hostname" > /etc/hostname

  echo "127.0.0.1 localhost" >> /etc/hosts
  echo "::1       localhost" >> /etc/hosts
  echo "127.0.1.1 $hostname" >> /etc/hosts
}

do_configure_user() {
  echo "Configuring user account"

  dir="/home/$username/Projects"
  cwd=$(pwd)

  useradd -m -G wheel -s /bin/zsh "$username"

  su - "$username" <<EOF
mkdir ~/Projects
cd ~/Projects

git clone https://github.com/saalaa/dotfiles

cd dotfiles

./install ack
./install flake8
./install git
./install tmux
./install vim
./install zsh

git remote set-url origin git@github.com:saalaa/dotfiles.git

exit
EOF
}

do_enable_services() {
  echo "Enabling services"

  systemctl enable dhcpcd.service &>/dev/null
  systemctl enable ntpd.service &>/dev/null
}

do_set_password() {
  echo "Setting password to hello123"

  echo "$1:hello123" | chpasswd
}

#
# Main section
#

while (( "$#" )); do
  case "$1" in
    --memory)
      shift
      memory="$1"
      ;;
    --boot-mode)
      shift
      boot_mode="$1"
      ;;
    --disk-label)
      shift
      disk_label="$1"
      ;;
    --chroot)
      chroot=yes
      ;;
    --username)
      shift
      username="$1"
      ;;
    --hostname)
      shift
      hostname="$1"
      ;;
    --with-gnome)
      with_gnome=yes
      ;;
    -h|--help)
      help
      exit
      ;;
    -*)
      error "Unrecognized argument '$1'"
      usage
      exit 1
      ;;
    *)
      device="$1"
      ;;
  esac

  shift
done

if [ -z $device ]; then
  error "Missing positionnal argument 'DEVICE'"
  usage
  exit 1
fi

if [ "$chroot" = "no" ]; then
  check_network

  if [ -z $memory ]; then
    detect_memory
  fi

  if [ -z $boot_mode ]; then
    detect_boot_mode
  fi

  if [ -z $disk_label ]; then
    detect_disk_label
  fi

  info
  confirm

  do_partition
  do_filesystems
  do_mount
  do_bootstrap
  do_configure_fstab
  do_copy
  do_chroot
  do_umount
else
  do_configure_swap
  do_configure_grub
  do_configure_time
  do_configure_lang
  do_configure_sudo
  do_configure_host

  do_enable_services

  do_install_apps

  if [ -z $username ]; then
    do_set_password root
  else
    do_configure_user
    do_set_password "$username"
  fi

  if [ "$with_gnome" = "yes" ]; then
    do_install_gnome
  fi

  echo "Entering shell, press ^D to finish install"

  PS1="shell % " sh
fi

echo Done.
